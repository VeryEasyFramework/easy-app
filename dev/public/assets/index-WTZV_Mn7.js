var f=Object.defineProperty;var m=(n,e,t)=>e in n?f(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var r=(n,e,t)=>m(n,typeof e!="symbol"?e+"":e,t);import{q as h,H as l}from"./index-BgLTC03-.js";class u{constructor(e){r(this,"socket");r(this,"host");r(this,"rooms",[]);r(this,"messageListeners",[]);r(this,"statusListeners",[]);r(this,"manualClose",!1);const t=window.location.protocol==="https:"?"wss":"ws";this.host=e||`${t}://${window.location.host}/ws`}get connected(){var e;return((e=this.socket)==null?void 0:e.readyState)===WebSocket.OPEN}get connecting(){var e;return((e=this.socket)==null?void 0:e.readyState)===WebSocket.CONNECTING}get closed(){var e;return((e=this.socket)==null?void 0:e.readyState)===WebSocket.CLOSED}onMessage(e){this.messageListeners.includes(e)||this.messageListeners.push(e)}removeMessageListener(e){this.messageListeners=this.messageListeners.filter(t=>t!==e)}onStatusChange(e){this.statusListeners.push(e)}removeStatusListener(e){this.statusListeners=this.statusListeners.filter(t=>t!==e)}connect(){this.socket=new WebSocket(this.host),this.manualClose=!1,this.notifyStatus("connecting"),this.socket.addEventListener("open",e=>{this.notifyStatus("open"),this.rejoinRooms(),this.socket.addEventListener("close",async t=>{this.notifyStatus("closed"),this.manualClose||this.retryReconnect(1e3)}),this.socket.addEventListener("message",t=>{let s;try{s=JSON.parse(t.data)}catch{s={data:t.data}}if("room"in s&&"event"in s&&"data"in s)for(const o of this.messageListeners)o(s.room,s.event,s.data)})}),this.socket.addEventListener("error",e=>{this.notifyStatus("error")})}notifyStatus(e){for(const t of this.statusListeners)t(e)}retryReconnect(e){let t=0;const s=setInterval(()=>{if(t>=e){clearInterval(s);return}if(this.connected){clearInterval(s);return}this.closed&&(t++,console.log(`Reconnecting... ${t}/${e}`),this.reconnect())},1e3)}reconnect(){this.closed&&this.connect()}rejoinRooms(){for(const e of this.rooms){if(e.events.length===0){this.send({type:"join",room:e.name});return}for(const t of e.events)this.send({type:"join",room:e.name,event:t})}}join(e,t){this.rooms.find(s=>s.name===e)?this.rooms=this.rooms.map(s=>(s.name===e&&s.events.push(t),s)):this.rooms.push({name:e,events:[t]}),this.send({type:"join",room:e,event:t})}leave(e,t){t?this.rooms=this.rooms.map(s=>(s.name===e&&(s.events=s.events.filter(o=>o!==t)),s)):this.rooms=this.rooms.filter(s=>s.name!==e),this.send({type:"leave",room:e,event:t})}disconnect(){this.manualClose=!0,this.socket.close()}send(e){this.connected&&this.socket.send(JSON.stringify(e))}}const g=void 0,i=new u(g);function y(n,e,t){const s=(o,a,c)=>{o===`entity:${n}`&&a===e&&t(c.data)};h(()=>{i.onMessage(s),i.join(`entity:${n}`,e)}),l(()=>{i.removeMessageListener(s),i.leave(`entity:${n}`,e)})}function p(n,e){const t=(s,o,a)=>{if(s===`entity:${n}`&&o==="list"){const c=a.data,d=a.action;e(d,c)}};h(()=>{i.onMessage(t),i.join(`entity:${n}`,"list")}),l(()=>{i.removeMessageListener(t),i.leave(`entity:${n}`,"list")})}export{y as a,p as l,i as r};
